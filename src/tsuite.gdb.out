GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.8, Copyright 1993 Free Software Foundation, Inc.
(gdb)         Reading symbols from tsuite...done.
 Breakpoint 1 at 0x400518: file tsuite.c, line 60.
 Note: breakpoint 1 also set at pc 0x400518.
Breakpoint 2 at 0x400518: file tsuite.c, line 61.
 Starting program: /tmp_mnt/n/fs/grad2/mg/duel/tsuite/tsuite 

Breakpoint 1, main () at tsuite.c:61
61	    printf("trivial tsuite program\n");
  DUEL 1.10.4, public domain debugging language. "dl" for help
1*2 = 2
1*(2/3) = 0.66666667
2*2 = 4
2*(2/3) = 1.33333333
3*2 = 6
3*(2/3) = 2.0
4*2 = 8
4*(2/3) = 2.66666667
5*2 = 10
5*(2/3) = 3.33333333
     x[20] = 402
x[21] = 443
x[22] = 486
x[23] = 531
x[38] = 1446
x[39] = 1523
x[40] = 1602
 x[33] = 1091
x[34] = 1158
 (x[33]>=33*33)&(x[33]<=35*35) = 1
(x[34]>=33*33)&(x[34]<=35*35) = 1
 (*(x+7))++ = -1
(*(x+8))++ = -1
(*(x+9))++ = -1
  y[0] = 0
y[1] = 0
y[2] = 0
 x+7==y = 1
   1
2
3
4
5
6
7
8
9
10
x is: 402, 443, 486, 531, 578, 627, 678, 731, 786, 843, 902, 963, 1026, 1091, 1158, 1227, 1298, 1371, 1446, 1523, 1602, 
 x[37]=1371
x[38]=1446
x[39]=1523
x[40]=1602
    &p = @10020020
 p = @10020020
*p = void @10020020
  1e+++3
^ Invalid float constant.
 Error:   i=4 ;
         -^-- operand x is not an lvalue for operator 'x=y'
operand ``i'' 	-- type: int 
		-- value: 40
 Error:   x=6 ;
         -^-- bad operand x type for operator 'x=y'
operand ``x'' 	-- type: int [100] 
		-- value: array @1001f000
 Error:   x++ ;
         -^-- operand x of '++' is not integral
operand ``x'' 	-- type: int [100] 
		-- value: array @1001f000
 Error:   --i ;
         ^-- operand of '--' must be an lvalue
operand ``i'' 	-- type: int 
		-- value: 40
  Aliases table:
p:  p = @10020020
j:  j = 100
y:  &x[7] = @1001f01c
i:  40
x:  x = array @1001f000
 Aliases table cleared
  s = "main string"
 s[4] = ' '
s[5] = 's'
s[6] = 't'
s[7] = 'r'
s[8] = 'i'
 s[6] = 't'
s[7] = 'r'
s[8] = 'i'
s[9] = 'n'
s[10] = 'g'
 #/(s[0] ...) = 11
 s[9] = 'n'
s[10] = 'g'
s[11] = '\0'
 gint = 0
 gint++ = 0
 gint++ = 1
 gint = 1
 gint = 1
 main.s = "main string"
 main.s = "ain string"
 main = func @004001f0
 main==main = 1
 frames_no = 1
 frame(0).s = "ain string"
 frame(0).(gint+0) = 1
 sizeof(gint) = 0x4
 sizeof(unsigned int) = 0x4
 sizeof(T) = 0x4
 sizeof(T) = 0x4b0
 sizeof(emp) = 0x4b0
 sizeof(emp[0]) = 0xc
 -1 = 0xffffffff
 (gint-9) = @fffffff8 [ILLEGAL]
 *&gint = 0xfffffff8
 -1 = 0xffffffff
  Error:   frame(0).gint
         --------^-- field not found in operator '.'
operand ``frame(0)'' 	-- type: int 
		-- value: frame(0)
 frame(0).(gint)
---------------^ syntax error
 Error:   frame(0).ha
         --------^-- field not found in operator '.'
operand ``frame(0)'' 	-- type: int 
		-- value: frame(0)
 Error:   sizeof(uint)
         -------^-- variable 'uint' not found
 sizeof gint
-----------^ syntax error
 Error:   main == printf
         -----^-- incompatible types for op ==
operand1 ``main'' 	-- type: ptr to func returning void 
		-- value: @004001f0
operand2 ``printf'' 	-- type: ptr to func returning int 
		-- value: @00400ca0
 Error:   main+1
         ----^-- unknown pointer object size for '+' op
operand ``main'' 	-- type: ptr to func returning void 
		-- value: @004001f0
 Error:   main > printf
         -----^-- incompatible types for op >
operand1 ``main'' 	-- type: ptr to func returning void 
		-- value: @004001f0
operand2 ``printf'' 	-- type: ptr to func returning int 
		-- value: @00400ca0
 Error:   printf+3
         ------^-- unknown pointer object size for '+' op
operand ``printf'' 	-- type: ptr to func returning int 
		-- value: @00400ca0
 T int x
-----^ syntax error
 uint y
------^ syntax error
 T uint z = 5
----------^ syntax error
  emp[4] = { a = 4, b = 16, name = "emp004" }
 emp[53].a = 76
 emp[53] = { a = 76, b = 2809, name = "emp053" }
 emp[53] = { a = 76, b = 2809, name = "emp053" }
 emp[36].b = 1295
 emp[36] = { a = 36, b = 1295, name = "emp036" }
emp[36].36*36 = 1296
 emp[36] = { a = 36, b = 1295, name = "emp036" }
36*36 = 1296
  (emp[74].name[3]) = '5'
 (mystrcmp(emp[74].name,s)) = 5
 (emp[74].name) = "emp574"
  root->code = 5000
root->left->code = 986
root-->left[[2]]->code = 835
root-->left[[3]]->code = 684
root-->left[[4]]->code = 533
root-->left[[5]]->code = 383
root-->left[[6]]->code = 232
root-->left[[7]]->code = 81
 root->code = 5000
root->left->code = 986
root-->left[[2]]->code = 835
root-->left[[3]]->code = 684
root-->left[[4]]->code = 533
root-->left[[5]]->code = 383
root-->left[[6]]->code = 232
root-->left[[7]]->code = 81
root-->left[[8]]->code = 12
root-->left[[9]]->code = 2
root-->left[[9]]->right->code = 5
root-->left[[9]]->right->left->code = 4
root-->left[[9]]-->right[[2]]->code = 11
root-->left[[9]]-->right[[2]]->left->code = 8
root-->left[[9]]-->right[[2]]-->left[[2]]->code = 7
root-->left[[9]]-->right[[2]]->left->right->code = 10
root-->left[[8]]->right->code = 24
root-->left[[8]]->right->left->code = 15
root-->left[[8]]->right-->left[[2]]->code = 14
root-->left[[8]]->right->left->right->code = 17
root-->left[[8]]->right->left->right->left->code = 16
root-->left[[8]]->right->left-->right[[2]]->code = 23
root-->left[[8]]->right->left-->right[[2]]->left->code = 20
root-->left[[8]]->right->left-->right[[2]]-->left[[2]]->code = 19
root-->left[[8]]->right->left-->right[[2]]->left->right->code = 22
root-->left[[8]]->right->left-->right[[2]]->left->right->left->code = 21
root-->left[[8]]-->right[[2]]->code = 36
root-->left[[8]]-->right[[2]]->left->code = 27
root-->left[[8]]-->right[[2]]->left->right->code = 35
root-->left[[8]]-->right[[2]]->left->right->left->code = 32
 #/(root ...) = 7144
 #/(root->left ...) = 3249
#/(root->right ...) = 3894
 #/(root->(left->left) ...) = 641
#/(root->(left->right) ...) = 2607
#/(root->(right->left) ...) = 595
#/(root->(right->right) ...) = 3298
  #/((root+0000000000000000000000000000000000000000000000000000) ...) = 7144
  root-->left[[9]]->code = 2
 root-->right[[14]]->code = 10999
  codes[2122] = 2
codes[2308] = 2
codes[5081] = 2
codes[5267] = 2
codes[8040] = 2
codes[9026] = 2
codes[9363] = 2
 (codes[0]) = 0
(codes[1]) = 0
(codes[3]) = 0
(codes[6]) = 0
(codes[9]) = 0
(codes[13]) = 0
(codes[18]) = 0
(codes[25]) = 0
(codes[26]) = 0
(codes[29]) = 0
 0
1
3
6
9
13
18
25
26
29
  root->left-->right[[2]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code) = 2122
root->left-->right[[2]]-->left[[5]]-->right[[3]]->left->right->left->right->(left->code) = 2308
root->right-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code) = 5081
root->right-->left[[5]]-->right[[3]]->left->right->left->right->(left->code) = 5267
root-->right[[4]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code) = 8040
root-->right[[5]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code) = 9026
root-->right[[5]]-->left[[4]]-->right[[3]]->left->right->left->right->(left->code) = 9363
 root->left-->right[[2]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code<=code) = 1
root->left-->right[[2]]-->left[[5]]-->right[[3]]->left->right->left->right->(left->code>=code) = 1
root->right-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code<=code) = 1
root->right-->left[[5]]-->right[[3]]->left->right->left->right->(left->code>=code) = 1
root-->right[[4]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code<=code) = 1
root-->right[[5]]-->left[[6]]->right->left-->right[[5]]->left->right->left->(right->code<=code) = 1
root-->right[[5]]-->left[[4]]-->right[[3]]->left->right->left->right->(left->code>=code) = 1
 1009
1013
1019
1021
1031
1033
1039
1049
1051
1061
  ELA
 1 = DAVE
 us = DAVE
 0
1
2
  Error:   emp[0]=us
         ------^-- incompatible types for op x=y
operand1 ``emp[0]'' 	-- type: struct .F13 { int a ; int b ; char * name ; } ; 
		-- value: struct @10001510
operand2 ``us'' 	-- type: enum .F14 
		-- value: DAVE
 Error:   emp=us
         ---^-- bad operand x type for operator 'x=y'
operand ``emp'' 	-- type: array [100] of struct .F13 { int a ; int b ; char * name ; } ; 
		-- value: array @10001510
 Error:   us=emp
         --^-- operand x of 'y=x' is not numeric
operand ``emp'' 	-- type: array [100] of struct .F13 { int a ; int b ; char * name ; } ; 
		-- value: array @10001510
  
